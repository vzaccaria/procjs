{"tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Why\r\n\r\nJust got fed up with looking for a process in a long-ass output of regular `ps`. \r\n\r\n## How\r\nThis package provides some command-line utilities for inspecting processes' status on a server:\r\n\r\n* `jsps`: wrapper for the `ps` utility that produces a `json` array with processes' info. It is based on [Mike Grundy's `awkward` script](https://github.com/mgrundy/awkward).\r\n\r\n* `proc`: REST server that polls periodically `jsps` and exports process information in `json` format. The following routes are supported:\r\n\r\n    * `/proc`                     get all `jsps` output\r\n    * `/proc/:key`                returns the value of `key` for all processes (in a list)\r\n    * `/proc/:key/:value`         returns a json object for the process that has `key`=`value`\r\n    * `/proc/:key/:value/:proj`   as above, but projects the result onto field `proj`   \r\n\r\n* `eps`: simple program that reorders the output of `jsps` by using fuzzy string matching on command name and user name (if available). To be used by piping the output of `jsps`.\r\n\r\n## Installation ##\r\n\r\nInstall LiveScript globally:\r\n\r\n    > npm install LiveScript -g\r\n\r\nThen:\r\n\r\n    > npm install procjs -g\r\n    \r\n## Usage ##\r\n\r\n`jsps` can be used with all the usual `ps` options (that depend, in turn, on your OS):\r\n\r\n    jsps -fec\r\n    [{\r\n      \"UID\": 0,\r\n      \"PID\": 1,\r\n      \"PPID\": 0,\r\n      \"C\": 0,\r\n      \"STIME\": \"10:08AM\",\r\n      \"TTY\": \"??\",\r\n      \"TIME\": \"0:30.02\",\r\n      \"CMD\": \"launchd\"\r\n    },\r\n    {\r\n      \"UID\": 0,\r\n      \"PID\": 12,\r\n      \"PPID\": 1,\r\n      \"C\": 0,\r\n      \"STIME\": \"10:08AM\",\r\n      \"TTY\": \"??\",\r\n      \"TIME\": \"0:03.53\",\r\n      \"CMD\": \"kextd\"\r\n    }\r\n    ...\r\n    \r\n`eps` can be used to parse the output of `jsps` and may be given different *keywords* to be used for sorting the output. `eps` applies some similarity metrics (from module `stringsim`) to reorder and pretty print process information (in reverse order, so best matches are shown at the end of the list):\r\n\r\n    > jsps -ec | eps 'core'\r\n     ...\r\n     74657      ??         1:55.34    DashboardClient\r\n     280        ??         0:00.02    AirPort Base Station Agent \r\n     71058      ??         0:00.56    cookied   \r\n     268        ??         0:00.05    filecoordinationd\r\n     15         ??         0:44.91    opendirectoryd\r\n     261        ??         0:00.92    com.apple.dock.extra\r\n     29         ??         1:01.50    coreservicesd\r\n     73686      ??         3:06.89    Cornerstone\r\n     200        ??         0:13.97    coreaudiod\r\n    > _\r\n      \r\n\r\nThe similarity is computed by considering `CMD` and `USER` fields. I plan to introduce some simple customizable option to modify the fuzzy search.\r\n\r\n`proc` can be started without options. It reads `settings.js` to setup some variables (like `jsps` options, refresh period and port to listen to). Here are some examples:\r\n\r\nGetting the complete process list on the server:\r\n\r\n    > curl localhost:6969/proc \r\n    [{\r\n      \"UID\": 0,\r\n      \"PID\": 1,\r\n      \"PPID\": 0,\r\n      \"C\": 0,\r\n      \"STIME\": \"10:08AM\",\r\n      \"TTY\": \"??\",\r\n      \"TIME\": \"0:30.02\",\r\n      \"CMD\": \"launchd\"\r\n    },\r\n    {\r\n      \"UID\": 0,\r\n      \"PID\": 12,\r\n      \"PPID\": 1,\r\n      \"C\": 0,\r\n      \"STIME\": \"10:08AM\",\r\n      \"TTY\": \"??\",\r\n      \"TIME\": \"0:03.53\",\r\n      \"CMD\": \"kextd\"\r\n    }\r\n    ...\r\n\r\nGetting the information about a single process:\r\n\r\n    > curl localhost:6969/proc/pid/12\r\n\r\nor\r\n\r\n    > curl localhost:6969/proc/cmd/kextd\r\n\r\nboth return a list with the same process description:\r\n\r\n    [ {\r\n      \"UID\": 0,\r\n      \"PID\": 12,\r\n      \"PPID\": 1,\r\n      \"C\": 0,\r\n      \"STIME\": \"10:08AM\",\r\n      \"TTY\": \"??\",\r\n      \"TIME\": \"0:03.53\",\r\n      \"CMD\": \"kextd\"\r\n    } ]\r\n\r\nthe process description can be projected to one of the available properties, e.g. (only the property of the first match is returned):\r\n\r\n    > curl localhost:6969/proc/pid/12/CMD\r\n    kextd\r\n\r\nFinally, there is an additional attribute that can be queried, called `status`:\r\n\r\n    > curl localhost:6969/proc/pid/12/status\r\n    UP\r\n\r\nThis attribute can be used for determining if the process is UP or DOWN. It can be used to connect [Status Dashboard](https://github.com/obazoud/statusdashboard) to probe and display the status of processes on a remote server.\r\n\r\n\r\n## Todo ##\r\n\r\n* Write tests\r\n* Profit\r\n* Extend Custom settings file.\r\n* Enhanced `eps` output (use graphics symbols).\r\n* Would it be nice to start processes with POST and kill process with DELETE\r\n","name":"Procjs"}